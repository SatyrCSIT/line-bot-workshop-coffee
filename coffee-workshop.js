const express = require('express');
const { Client, middleware } = require('@line/bot-sdk');
const { createMenuFlexMessage, createPromotionFlexMessage } = require('./menuComponent');
const {
    handleOrderRequest,
    handleQuantitySelection,
    handleSweetnessSelection,
    handleOrderConfirmation,
    handleOrderCancel,
    isOrderCommand,
    extractMenuId,
    isQuantitySelection,
    extractQuantity,
    isSweetnessSelection,
    extractSweetness,
    isOrderConfirm,
    isOrderCancel
} = require('./orderComponent');
const db = require('./db');
const cors = require('cors');
require('dotenv').config();
const axios = require('axios');

const config = {
    channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
    channelSecret: process.env.CHANNEL_SECRET,
};

const client = new Client(config);
const app = express();

app.use(cors());

// Webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE
app.post('/webhook', middleware(config), async (req, res) => {
    try {
        const events = req.body.events;
        const results = await Promise.all(events.map(handleEvent));
        res.json(results);
    } catch (error) {
        console.error('‚ùå Error handling webhook:', error);
        res.status(500).end();
    }
});

// ‡πÉ‡∏ä‡πâ express.json() ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏±‡∏ö API ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
app.use('/api', express.json());

// Endpoint ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π
app.post('/api/menu', async (req, res) => {
    const { name, price, image_url, category } = req.body;
    if (!name || !price || !image_url || !category) {
        return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }
    try {
        await db.query(
            'INSERT INTO menu (name, price, image_url, category) VALUES (?, ?, ?, ?)',
            [name, price, image_url, category]
        );
        res.status(201).json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (error) {
        console.error('Error adding menu:', error);
        res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π' });
    }
});

// Endpoint ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô
app.post('/api/promotions', async (req, res) => {
    const { title, description, start_date, end_date, image_url, active } = req.body;
    if (!title || !description || !start_date || !end_date || !image_url) {
        return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }
    try {
        await db.query(
            'INSERT INTO promotions (title, description, start_date, end_date, image_url, active) VALUES (?, ?, ?, ?, ?, ?)',
            [title, description, start_date, end_date, image_url, active ? 1 : 0]
        );
        res.status(201).json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (error) {
        console.error('Error adding promotion:', error);
        res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô' });
    }
});

// Endpoint ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
app.get('/api/orders/:userId', async (req, res) => {
    const { userId } = req.params;
    try {
        const [rows] = await db.query(`
            SELECT o.*, m.name as menu_name, m.image_url 
            FROM orders o 
            JOIN menu m ON o.menu_id = m.id 
            WHERE o.user_id = ? 
            ORDER BY o.order_date DESC 
            LIMIT 10
        `, [userId]);
        res.json(rows);
    } catch (error) {
        console.error('Error fetching orders:', error);
        res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' });
    }
});

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
async function handleEvent(event) {
    try {
        if (event.type !== 'message' || event.message.type !== 'text') return null;

        const { text } = event.message;
        const userId = event.source.userId;

        // ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        if (text === '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å' || text === 'register') {
            const [rows] = await db.query('SELECT * FROM users WHERE line_id = ?', [userId]);

            if (rows.length === 0) {
                const profile = await client.getProfile(userId);
                const displayName = profile.displayName;

                await db.query(
                    'INSERT INTO users (line_id, name, points) VALUES (?, ?, ?)',
                    [userId, displayName, 0]
                );

                const telegramToken = 'bottoken';
                const telegramChatId = 'chatid';
                const telegramMessage = `üë§ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:\n‡∏ä‡∏∑‡πà‡∏≠: ${displayName}\nLINE ID: ${userId}`;

                const telegramUrl = `https://api.telegram.org/bot${telegramToken}/sendMessage`;

                axios.post(telegramUrl, {
                    chat_id: telegramChatId,
                    text: telegramMessage,
                    parse_mode: 'HTML',
                }).catch(() => { });

                return client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${displayName} ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üéâ\n‡πÅ‡∏ï‡πâ‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: 0 ‡πÅ‡∏ï‡πâ‡∏°`
                });
            } else {
                return client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üéØ\n‡∏ä‡∏∑‡πà‡∏≠: ${rows[0].name}\n‡πÅ‡∏ï‡πâ‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${rows[0].points} ‡πÅ‡∏ï‡πâ‡∏°`
                });
            }
        }

        // ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        if (isOrderCommand(text)) {
            const menuId = extractMenuId(text);
            if (menuId) {
                const flexMessage = await handleOrderRequest(menuId, db, userId);
                return client.replyMessage(event.replyToken, flexMessage);
            }
        }

        // ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        if (isQuantitySelection(text)) {
            const quantity = extractQuantity(text);
            if (quantity) {
                const flexMessage = await handleQuantitySelection(userId, quantity);
                return client.replyMessage(event.replyToken, flexMessage);
            }
        }

        // ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô
        if (isSweetnessSelection(text)) {
            const sweetness = extractSweetness(text);
            if (sweetness) {
                const flexMessage = await handleSweetnessSelection(userId, sweetness);
                return client.replyMessage(event.replyToken, flexMessage);
            }
        }

        // ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ - ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        if (isOrderConfirm(text)) {
            const response = await handleOrderConfirmation(userId, db);
            return client.replyMessage(event.replyToken, response);
        }

        // ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        if (isOrderCancel(text)) {
            const response = await handleOrderCancel(userId);
            return client.replyMessage(event.replyToken, response);
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π
        if (text.trim().toLowerCase() === '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°' || text.trim().toLowerCase() === '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
            const flexMessage = await createMenuFlexMessage(text, db, event);
            return client.replyMessage(event.replyToken, flexMessage);
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô
        if (text.trim().toLowerCase() === '‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô' || text.trim().toLowerCase() === 'promotion') {
            const flexMessage = await createPromotionFlexMessage(db, event);
            return client.replyMessage(event.replyToken, flexMessage);
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô
        if (text.trim().toLowerCase() === '‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô' || text.trim().toLowerCase() === '‡πÄ‡πÄ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô') {
            const [rows] = await db.query('SELECT name, address, latitude, longitude FROM shop LIMIT 1');

            if (rows.length === 0) {
                return client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
                });
            }

            const shop = rows[0];

            return client.replyMessage(event.replyToken, {
                type: 'location',
                title: shop.name,
                address: shop.address,
                latitude: parseFloat(shop.latitude),
                longitude: parseFloat(shop.longitude),
            });
        }

        // ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        if (text.trim().toLowerCase() === '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' || text.trim().toLowerCase() === 'order history') {
            const [orderRows] = await db.query(`
            SELECT o.*, m.name as menu_name 
            FROM orders o 
            JOIN menu m ON o.menu_id = m.id 
            WHERE o.user_id = ? 
            ORDER BY o.order_date DESC 
            LIMIT 5
                `, [userId]);

            const [userRows] = await db.query('SELECT points FROM users WHERE line_id = ?', [userId]);

            if (orderRows.length === 0) {
                return client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: `‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠\nüéØ ‡πÅ‡∏ï‡πâ‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${userRows[0]?.points || 0} ‡πÅ‡∏ï‡πâ‡∏°`
                });
            }

            let historyText = `üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n\n`;
            orderRows.forEach((order, index) => {
                const orderDate = new Date(order.order_date).toLocaleDateString('th-TH');
                historyText += `${index + 1}. ${order.menu_name}\n`;
                historyText += `   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${order.quantity} ‡πÅ‡∏Å‡πâ‡∏ß\n`;
                historyText += `   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô: ${order.sweetness_level}\n`;
                historyText += `   ‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ø${order.total_price.toFixed(2)}\n`;
                historyText += `   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${orderDate}\n`;
                historyText += `   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${order.status === 'pending' ? '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' : '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}\n\n`;
            });
            historyText += `üéØ ‡πÅ‡∏ï‡πâ‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${userRows[0]?.points || 0} ‡πÅ‡∏ï‡πâ‡∏°`;

            return client.replyMessage(event.replyToken, {
                type: 'text',
                text: historyText
            });
        }

        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        if (text.trim().toLowerCase() === 'help' || text.trim().toLowerCase() === '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠') {
            const helpText = `ü§ñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n\n` +
                `üìã "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°" - ‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n` +
                `üéâ "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô" - ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô\n` +
                `üó∫Ô∏è "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô" - ‡∏î‡∏π‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏£‡πâ‡∏≤‡∏ô\n` +
                `üë§ "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πâ‡∏°\n` +
                `üìú "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" - ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏ï‡πâ‡∏°\n` +
                `üõí ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Order Now" ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠\n\n` +
                `üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ï‡πâ‡∏°: ‡∏£‡∏±‡∏ö 1 ‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏∏‡∏Å ‡πÜ 50 ‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢\n` +
                `üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠!`;

            return client.replyMessage(event.replyToken, {
                type: 'text',
                text: helpText
            });
        }

        return null;

    } catch (err) {
        console.error('‚ùå Error in handleEvent:', err);
        return client.replyMessage(event.replyToken, {
            type: 'text',
            text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö üò¢',
        });
    }
}

app.listen(3000, () => {
    console.log('‚òï Coffee LINE Bot is running on port 3000');
});