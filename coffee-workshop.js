const express = require('express');
const { Client, middleware } = require('@line/bot-sdk');
const { createMenuFlexMessage } = require('./menuComponent');
const db = require('./db');
require('dotenv').config();

const config = {
    channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
    channelSecret: process.env.CHANNEL_SECRET,
};

const client = new Client(config);
const app = express();

app.post('/webhook', middleware(config), async (req, res) => {
    const events = req.body.events;
    const results = await Promise.all(events.map(handleEvent));
    res.json(results);
});

async function handleEvent(event) {
    if (event.type !== 'message' || event.message.type !== 'text') return null;

    const { text } = event.message;
    const userId = event.source.userId;

    const axios = require('axios');

    if (text === '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å' || text === 'register') {
        const [rows] = await db.query('SELECT * FROM users WHERE line_id = ?', [userId]);

        if (rows.length === 0) {
            // üîç ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å LINE
            const profile = await client.getProfile(userId);
            const displayName = profile.displayName;

            // üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB
            await db.query('INSERT INTO users (line_id, name, points) VALUES (?, ?, ?)', [userId, displayName, 0]);

            // üöÄ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ Telegram
            const telegramToken = 'bottoken';
            const telegramChatId = 'chatid';
            const telegramMessage = `üë§ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:\n‡∏ä‡∏∑‡πà‡∏≠: ${displayName}\nLINE ID: ${userId}`;

            const telegramUrl = `https://api.telegram.org/bot${telegramToken}/sendMessage`;

            axios.post(telegramUrl, {
                chat_id: telegramChatId,
                text: telegramMessage,
                parse_mode: 'HTML'
            }).then(() => {
                console.log('‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
            }).catch(err => {
                console.error('‚ùå ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err.response?.data || err.message);
            });

            return client.replyMessage(event.replyToken, {
                type: 'text',
                text: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${displayName} ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üéâ`,
            });
        } else {
            return client.replyMessage(event.replyToken, {
                type: 'text',
                text: `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡πÅ‡∏ï‡πâ‡∏° ${rows[0].points} ‡πÅ‡∏ï‡πâ‡∏° üéØ`,
            });
        }
    }

    if (text.trim().toLowerCase() === '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°' || text.trim().toLowerCase() === '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
        const flexMessage = await createMenuFlexMessage(text, db, event);
        return client.replyMessage(event.replyToken, flexMessage);
    }

    if (text.trim().toLowerCase() === '‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô' || text.trim().toLowerCase() === 'promotion') {
        const today = new Date().toISOString().slice(0, 10); // YYYY-MM-DD
        const [rows] = await db.query(
            'SELECT * FROM promotions WHERE active = 1 AND start_date <= ? AND end_date >= ?',
            [today, today]
        );

        if (rows.length === 0) {
            return client.replyMessage(event.replyToken, {
                type: 'text',
                text: '‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©',
            });
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
        const promoList = rows.map(promo => `üéâ ${promo.title}\n${promo.description}`).join('\n\n');

        return client.replyMessage(event.replyToken, {
            type: 'text',
            text: `üì¢ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:\n\n${promoList}`,
        });
    }
    if (text.trim().toLowerCase() === '‡πÄ‡πÄ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô') {
        const [rows] = await db.query('SELECT name, address, latitude, longitude FROM shop LIMIT 1');

        if (rows.length === 0) {
            return client.replyMessage(event.replyToken, {
                type: 'text',
                text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
            });
        }

        const shop = rows[0];

        return client.replyMessage(event.replyToken, {
            type: 'location',
            title: shop.name,
            address: shop.address,
            latitude: parseFloat(shop.latitude),
            longitude: parseFloat(shop.longitude),
        });
    }


}

app.listen(3000, () => {
    console.log('‚òï Coffee LINE Bot is running on port 3000');
});