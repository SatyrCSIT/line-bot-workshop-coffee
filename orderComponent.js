// orderComponent.js - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô

const { createQuantitySelector, createSweetnessSelector, createOrderConfirmation } = require('./orderUIComponent');

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
const pendingOrders = new Map();

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
 */
async function createQuantitySelection(menuId, menuData) {
    return createQuantitySelector(menuId, menuData);
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô
 */
async function createSweetnessSelection(menuId, quantity, menuData) {
    return createSweetnessSelector(menuId, quantity, menuData);
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 */
async function createOrderConfirmationMessage(orderData) {
    return createOrderConfirmation(orderData);
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏ô‡∏π
 */
async function handleOrderRequest(menuId, db, userId) {
    try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π
        const [menuRows] = await db.query('SELECT * FROM menu WHERE id = ?', [menuId]);

        if (menuRows.length === 0) {
            return {
                type: 'text',
                text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
            };
        }

        const menuData = menuRows[0];

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á order session
        const orderSession = {
            menuId: menuId,
            menuData: menuData,
            userId: userId,
            step: 'quantity',
            timestamp: Date.now()
        };

        pendingOrders.set(userId, orderSession);

        // ‡∏™‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        return await createQuantitySelection(menuId, menuData);

    } catch (error) {
        console.error('Error handling order request:', error);
        return {
            type: 'text',
            text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'
        };
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
 */
async function handleQuantitySelection(userId, quantity) {
    try {
        const orderSession = pendingOrders.get(userId);

        if (!orderSession || orderSession.step !== 'quantity') {
            return {
                type: 'text',
                text: '‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà'
            };
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        orderSession.quantity = quantity;
        orderSession.step = 'sweetness';
        pendingOrders.set(userId, orderSession);

        // ‡∏™‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô
        return await createSweetnessSelection(
            orderSession.menuId,
            quantity,
            orderSession.menuData
        );

    } catch (error) {
        console.error('Error handling quantity selection:', error);
        return {
            type: 'text',
            text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'
        };
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô
 */
async function handleSweetnessSelection(userId, sweetness) {
    try {
        const orderSession = pendingOrders.get(userId);

        if (!orderSession || orderSession.step !== 'sweetness') {
            return {
                type: 'text',
                text: '‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà'
            };
        }

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        const orderData = {
            menuId: orderSession.menuId,
            menuName: orderSession.menuData.name,
            menuPrice: Number(orderSession.menuData.price), // üîß ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô number
            menuImage: orderSession.menuData.image_url,
            quantity: orderSession.quantity,
            sweetness: sweetness,
            totalPrice: Number(orderSession.menuData.price) * orderSession.quantity,
            userId: userId
        };


        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
        orderSession.orderData = orderData;
        orderSession.step = 'confirmation';
        pendingOrders.set(userId, orderSession);

        // ‡∏™‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        return await createOrderConfirmationMessage(orderData);

    } catch (error) {
        console.error('Error handling sweetness selection:', error);
        return {
            type: 'text',
            text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô'
        };
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 */
async function handleOrderConfirmation(userId, db) {
    try {
        const orderSession = pendingOrders.get(userId);

        if (!orderSession || orderSession.step !== 'confirmation') {
            return {
                type: 'text',
                text: '‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà'
            };
        }

        const orderData = orderSession.orderData;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const [userRows] = await db.query('SELECT * FROM users WHERE line_id = ?', [userId]);
        if (!userRows.length) {
            console.error(`User not found: ${userId}`);
            return {
                type: 'text',
                text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'
            };
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const [result] = await db.query(
            'INSERT INTO orders (user_id, menu_id, quantity, sweetness_level, total_price, status, order_date) VALUES (?, ?, ?, ?, ?, ?, NOW())',
            [userId, orderData.menuId, orderData.quantity, orderData.sweetness, orderData.totalPrice, 'pending']
        );

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ï‡πâ‡∏° (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ 1 ‡πÅ‡∏ï‡πâ‡∏°‡∏ï‡πà‡∏≠ 50 ‡∏ö‡∏≤‡∏ó)
        const pointsEarned = Math.floor(orderData.totalPrice / 50);

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏ï‡πâ‡∏°‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
        await db.query(
            'UPDATE users SET points = points + ? WHERE line_id = ?',
            [pointsEarned, userId]
        );

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ï‡πâ‡∏°‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á point_history
        await db.query(
            'INSERT INTO point_history (user_id, order_id, points_earned, description, created_at) VALUES (?, ?, ?, ?, NOW())',
            [userId, result.insertId, pointsEarned, `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${pointsEarned} ‡πÅ‡∏ï‡πâ‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ${orderData.menuName} (${orderData.quantity} ‡πÅ‡∏Å‡πâ‡∏ß)`]
        );

        // ‡∏•‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
        pendingOrders.delete(userId);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏ï‡πâ‡∏°
        const replyText = `‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüçµ ${orderData.menuName}\nüì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${orderData.quantity} ‡πÅ‡∏Å‡πâ‡∏ß\nüçØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô: ${orderData.sweetness}\nüí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°: ‡∏ø${orderData.totalPrice.toFixed(2)}\nüéâ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${pointsEarned} ‡πÅ‡∏ï‡πâ‡∏°!\n\nüìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤`;

        return {
            type: 'text',
            text: replyText
        };

    } catch (error) {
        console.error('Error confirming order:', error);
        return {
            type: 'text',
            text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'
        };
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 */
async function handleOrderCancel(userId) {
    pendingOrders.delete(userId);
    return {
        type: 'text',
        text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
    };
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
function isOrderCommand(text) {
    return text.toLowerCase().startsWith('order ');
}

/**
 * ‡∏î‡∏∂‡∏á menu ID ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 */
function extractMenuId(text) {
    const match = text.match(/order (\d+)/i);
    return match ? parseInt(match[1]) : null;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
function isQuantitySelection(text) {
    return text.toLowerCase().startsWith('qty_');
}

/**
 * ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 */
function extractQuantity(text) {
    const match = text.match(/qty_(\d+)/i);
    return match ? parseInt(match[1]) : null;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
function isSweetnessSelection(text) {
    return text.toLowerCase().startsWith('sweet_');
}

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 */
function extractSweetness(text) {
    const match = text.match(/sweet_(.+)/i);
    return match ? match[1] : null;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
function isOrderConfirm(text) {
    return text.toLowerCase() === 'confirm_order';
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
function isOrderCancel(text) {
    return text.toLowerCase() === 'cancel_order';
}

/**
 * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ)
 */
function cleanExpiredSessions() {
    const now = Date.now();
    const expirationTime = 30 * 60 * 1000; // 30 ‡∏ô‡∏≤‡∏ó‡∏µ

    for (const [userId, session] of pendingOrders.entries()) {
        if (now - session.timestamp > expirationTime) {
            pendingOrders.delete(userId);
        }
    }
}

// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
setInterval(cleanExpiredSessions, 30 * 60 * 1000);

module.exports = {
    handleOrderRequest,
    handleQuantitySelection,
    handleSweetnessSelection,
    handleOrderConfirmation,
    handleOrderCancel,
    isOrderCommand,
    extractMenuId,
    isQuantitySelection,
    extractQuantity,
    isSweetnessSelection,
    extractSweetness,
    isOrderConfirm,
    isOrderCancel
};